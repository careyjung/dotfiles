#!/usr/bin/env bash

#
# Apps to be installed, in order, along with their installation method. To add another
#    app to the setup, insert its name in the list, specify its method, and define
# 
#	'setup' -> invokes "setup_${app}", if defined, error otherwise
#	'cask' -> invokes "brew cask install ${app}"
#	'' (blank) -> invokes "brew install ${app}"
#
APPS=(
    homebrew:setup
    bash:setup
    coreutils
    diffutils
    git
    dockutil
    nmap
    sass:setup
    tmux
    heroku
    python:setup
    iterm2:setup
    gcloud:setup
    system:setup
    terminal:setup
    finder:setup
    dock:setup
    appstore:setup
    repo:setup
    gpg-suite:cask
    logitech-options:setup
    emacs:cask
    google-chrome:cask
    google-play:setup
    sketchup-pro:cask
    whatsapp:cask
    slack:cask
    messenger:cask
    google-chat:cask
)



function setup_google-player() {
    brew cask install marshall-of-sound-google-play-music-player
}

function setup_sass() {
    brew install sass/sass/sass
}

function setup_logitech-options() {
    brew cask install homebrew/cask-drivers/logitech-options
}

function setup_gcloud() {
    brew cask install google-cloud-sdk
    tar xvf ~/Documents/Keys/gcloud.tar
}

function setup_homebrew() {
    
    if [ ! `which brew` ]; then
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
    brew update
    brew upgrade
    brew cleanup
}

function setup_bash() {

    # Install 4.x
    brew install bash

    # add it to shells
    if ! fgrep -q '/usr/local/bin/bash' /etc/shells; then
        echo '/usr/local/bin/bash' | sudo tee -a /etc/shells
    fi
    if [ $SHELL != '/usr/local/bin/bash' ]; then
        sudo chsh -s /usr/local/bin/bash $(whoami)
    fi
        
}

function setup_python() {
    brew install python
    brew install python2
    pip install virtualenvwrapper
}

function setup_iterm2() {
    brew cask install iterm2
    cp init/com.googlecode.iterm2.plist ~/Library/Preferences
    chmod 600 ~/Library/Preferences/com.googlecode.iterm2.plist
}

function setup_system() {
    # nvram Preferences:
    # - silent boot (unreliable)
    sudo nvram SystemAudioVolume=" "
    
    # screensaver prefs

    # make sure no prefs are hiding in memory
    osascript -e 'tell application "System Preferences" to quit'
    killall cfprefsd

    defaults write com.apple.screensaver askForPassword -int 1
    defaults write com.apple.screensaver askForPasswordDelay 1200
    defaults write com.apple.screensaver idleTime 120


    # Device Preferences

    # fast key repeat
    defaults write NSGlobalDomain KeyRepeat -int 2

    # no keypress delay
    defaults write NSGlobalDomain InitialKeyRepeat -int 15

    # tab moves focus through All controls
    defaults write NSGlobalDomain AppleKeyboardUIMode -int 2

    # fast tracking
    defaults write NSGlobalDomain com.apple.trackpad.scaling -int 3
    # tap to click
    defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad \
             Clicking -bool true
    defaults -currentHost write NSGlobalDomain \
             com.apple.mouse.tapBehavior -int 1

    #
    # Menu bar stuff
    #
    
    # Clock Display (add date and seconds)
    defaults write com.apple.menuextra.clock DateFormat \
             -string "EEE MMM d  h:mm:ss a"

    # Show battery percentage
    defaults write com.apple.menuextra.battery ShowPercent YES

    # Restart the menu bar
    killall SystemUIServer
    
    # General Preferences: preserve windows when closing an app
    defaults write NSGlobalDomain NSQuitAlwaysKeepsWindows -boolean true

    # General tab: use dark menu bar and dock
    defaults write NSGlobalDomain AppleInterfaceStyle -string Dark

    # Security & Privacy pane
    # Turn firewall on
    sudo defaults write /Library/Preferences/com.apple.alf globalstate -int 1
}

function setup_terminal() {

    # delete existing Solarized Dark profile, if it exists
    /usr/libexec/PlistBuddy ~/Library/Preferences/com.apple.Terminal.plist -x -c \
                            "delete ':Window Settings:Solarized Dark'" 2>/dev/null

    # add back the key
    /usr/libexec/PlistBuddy ~/Library/Preferences/com.apple.Terminal.plist -x -c \
                            "add ':Window Settings:Solarized Dark' dict"

    # import previously saved Terminal preferences
    /usr/libexec/PlistBuddy ~/Library/Preferences/com.apple.Terminal.plist -x -c \
                            "merge '/Users/careyjung/init/Solarized Dark.terminal' ':Window Settings:Solarized Dark'"

    # make them the default
    /usr/libexec/PlistBuddy ~/Library/Preferences/com.apple.Terminal.plist -x -c \
                            "set ':Default Window Settings' 'Solarized Dark'"
    /usr/libexec/PlistBuddy ~/Library/Preferences/com.apple.Terminal.plist -x -c \
                            "set ':Startup Window Settings' 'Solarized Dark'"

    # flush the plist cache
    killall cfprefsd
}

function setup_finder() {

    killall cfprefsd

    # Finder Preferences:
    # - hide files from Desktop
    defaults write com.apple.finder CreateDesktop false

    # Full POSIX path in Title bar
    defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

    # Keep folders on top when sorting by name
    # defaults write com.apple.finder _FXSortFoldersFirst -bool true

    # Use list view in all Finder windows by default
    # Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv`
    defaults write com.apple.finder FXPreferredViewStyle -string "clmv"

    # Disable the warning before emptying the Trash
    defaults write com.apple.finder WarnOnEmptyTrash -bool false

    killall Finder
}

function setup_dock() {
    [ $(which dockutil) ] || brew install dockutil

    # Dock Preferences
    # Hot corners:
    #  0: no-op
    #  2: Mission Control
    #  3: Show application windows
    #  4: Desktop
    #  5: Start screen saver
    #  6: Disable screen saver
    #  7: Dashboard
    # 10: Put display to sleep
    # 11: Launchpad
    # 12: Notification Center
    # 'tr' = top right, 'br' = bottom right, etc.
    defaults write com.apple.dock wvous-tr-corner -int 2
    defaults write com.apple.dock wvous-tr-modifier -int 0
    defaults write com.apple.dock wvous-br-corner -int 10
    defaults write com.apple.dock wvous-br-modifier -int 0
    defaults write com.apple.dock wvous-bl-corner -int 4
    defaults write com.apple.dock wvous-bl-modifier -int 0			

    defaults write com.apple.dock minimize-to-application -bool true

    # Orientation: left, bottom, or right
    defaults write com.apple.dock orientation -string left

    # auto-hide on
    defaults write com.apple.dock autohide -bool true

    # auto-hide animation off
    defaults write com.apple.dock autohide-delay -float 0
    defaults write com.apple.dock autohide-time-modifier -float 0

    # remove all apps from the dock. I'll add those I need
    # as I go. And in Mojave, the new 'recently used' section
    # in the dock does about everything I need.
    # Note to self: dockutil does a 'killall Dock' to restart it
    dockutil --remove all
}

function setup_appstore() {

    # NB: the softwareupdate command below is the only one that seems
    # to have any effect on system settings

    # These supposedly need to run as root
    sudo softwareupdate --schedule off

    # Enable the WebKit Developer Tools in the Mac App Store
    sudo defaults write com.apple.appstore WebKitDeveloperExtras -bool true

    # Enable Debug Menu in the Mac App Store
    sudo defaults write com.apple.appstore ShowDebugMenu -bool true

    # Enable the automatic update check
    sudo defaults write com.apple.SoftwareUpdate \
         AutomaticCheckEnabled -boolean true
    # Check for software updates daily, not just once per week
    sudo defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

    # Download newly available updates in background
    sudo defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1

    # Install System data files & security updates
    sudo defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1

    # Turn on app auto-update
    sudo defaults write com.apple.commerce AutoUpdate -bool true

    # Turn on OS auto-updates
    sudo defaults write com.apple.commerce \
         AutoUpdateRestartRequired -bool true

    sudo softwareupdate --schedule on

}

function setup_repo() {

    tar xvf Documents/Keys/ssh.tar
    tar xvf Documents/Keys/gnupg.tar
    tar xvf Documents/Keys/netrc.tar

    if [ ! -d .git ]; then
        git init
        git remote add origin git@github.com:careyjung/dotfiles.git
        git fetch
        git checkout origin/master --force --track
    fi

    . ~/.bash_profile
}

function setup_virtualbox() {
    brew cask install virtualbox

    # work around a bug in virtualbox install. Attempt install once,
    # then load all four kernel extensions, approve them, then install
    # again.
    ~/bin/virtualboxkext load
    read -t 60 -p "Open Security & Privacy settings and approve the Oracle extensions (four times). Press 'd' when done or any other key to skip. Waiting 60 seconds...: " answer
    if [ "$answer" = "d" ]; then
        brew cask install virtualbox
    fi

    brew cask install virtualbox-extension-pack
}


#
# Main code
#
while getopts ":hid" opt; do
  case ${opt} in
    h ) lst=$( IFS='|'; echo "Usage: $0 [${APPS[*]}]"); echo $lst; exit 0
      ;;
    \? ) lst=$( IFS='|'; echo "Usage: $0 [${APPS[*]}]"); echo $lst; exit 1
      ;;
  esac
done
shift $((OPTIND -1))

# if specified on the command line, only do those setups
if [ $# -gt 0 ]; then
    unset APPS
    APPS=$@
fi

cd ~
for appspec in ${APPS[@]}; do
    app=${appspec/:*/}
    cmd=${appspec/*:/}

    sudo -v
    if [[ "${cmd}" = "${app}" ]]; then
        brew install ${app}
    elif [[ "${cmd}" = "setup" ]]; then
        setup_${app}
    elif [[ "${cmd}" = "cask" ]]; then
        brew cask install ${app}
    else
        echo "App specification error, app=$appspec"
    fi
done


