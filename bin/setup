#!/usr/local/bin/bash

# To add an app to the setup, add it to APPSPECS. Syntax for an app spec is
#	[appname]=prereq1,prereq2,...:command1,command2,...
#	where
#	* appname = a homebrew brew or cask, or other app
#	* prereqN = a prerequisite app in APPSPECS
#	* command1 = an install command taking one parameter.
#	  Valid commands are currently:
#	  'brew-install' (invokes 'brew install $appname')
#	  'cask-install' (invokes 'brew cask install $appname')
#	  'init' (invokes init_$appname, which must be locally defined)
#	Colon (":") is optional; if not present, everything is a command
#
declare -A APPSPECS=(
    [core]=homebrew,bash,git,ssh,dotfiles:
    [homebrew]=init
    [bash]=homebrew:init
    [git]=homebrew:brew-install
    [ssh]=init
    [dotfiles]=git:init

    [gpg-suite]=homebrew:cask-install,init
    [coreutils]=core:brew-install
    [diffutils]=core:brew-install
    [google-cloud-sdk]=core:cask-install
    [heroku]=brew-install,init
    [iterm2]=core:cask-install,init
    [nmap]=brew-install
    [sass/sass/sass]=brew-install
    [tmux]=dotfiles:brew-install
    [speedtest-cli]=dotfiles:brew-install

    [python2]=core:brew-install
    [python]=core:brew-install

    [rbenv]=core:init

    [appstore]=init
    [dockutil]=brew-install
    [dock]=dockutil:init
    [finder]=core:init
    [system]=init
    [terminal]=dotfiles:init

    [emacs]=dotfiles:cask-install
    [google-chat]=cask-install
    [google-chrome]=cask-install
    [logitech-options]=cask-install
    [sketchup-pro]=cask-install
    [slack]=cask-install
    [virtualbox-extension-pack]=virtualbox:cask-install
    [virtualbox]=cask-install
    [virtualenvwrapper]=python,python2:init
    [whatsapp]=cask-install
    [kindle]=cask-install
    [evernote]=dotfiles:cask-install
    [visual-studio-code]=dotfiles:cask-install
    [microsoft-office]=dotfiles:cask-install
)

# get the keys
declare -a APPS=${!APPSPECS[@]}

# array used to ensure each app is only processed once
declare -A RUNONCE

# call the local init_$app function
function init() {
    init_$1
}

# call 'brew install $app'
function brew-install() {
    brew install $1
}

# call 'brew cask install $app'
function cask-install() {
    brew cask install $1
}

# -n option sets DRYRUN to true
declare DRYRUN
function run() {
    if [[ "$DRYRUN" != "true" ]]; then
        sudo -v
        $1 $2
    fi
}

# process each app.
function process_app() {
    # only process each app once
    if [[ "${RUNONCE[$1]}" = "" ]]; then
        # get the list of prereqs and commands
        # format is "prereq,prereq,...:command,command,..."
        # colon is optional; if missing, no prereqs are assumed
        local app=$1
        local appspec=${APPSPECS[$app]}
        local prereqs=${appspec%%:*}
        local commands=${appspec##*:}
        if [[ "$prereqs" = "$commands" ]]; then
            prereqs=""
        fi

        # process dependencies recursively before this app is processed
        for prereq in ${prereqs//,/ }; do
            process_app $prereq
        done

        # run the list of commands on this app. Only 3 possibilities
        # allowed: init, brew-install, and cask-install
        for cmd in ${commands//,/ }; do
            case $cmd in
                init | brew-install | cask-install)
                    echo -e "\033[0;31m${cmd} ${app}\033[0m"

                    if [[ "$DRYRUN" != "true" ]]; then
                        sudo -v
                        $cmd $app
                    fi
                    if [[ "$STEP" = "true" ]]; then
                        read -p "Press any key to continue..."
                    fi
                    ;;
                *) echo "Unknown command spec \"${cmd}\" for app ${app}"
                   ;;
            esac
        done

        RUNONCE[$1]="done"
    fi
}

function init_rbenv() {
    rbenv init
    curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash
    rbenv install 2.5.3
    rbenv global 2.5.3
}

function init_ssh() {
    test -d ~/.ssh || tar xvf Documents/Keys/ssh.tar
}

function init_heroku() {
    test -f ~/.netrc || tar xvf Documents/Keys/netrc.tar
}

function init_gpg-suite() {
    test -d ~/.gnupg || tar xvf Documents/Keys/gnupg.tar
}

function init_homebrew() {
    brew update
    brew upgrade
    brew cleanup
}

function init_bash() {
    if ! fgrep -q '/usr/local/bin/bash' /etc/shells; then
        echo '/usr/local/bin/bash' | sudo tee -a /etc/shells
    fi
    if [ $SHELL != '/usr/local/bin/bash' ]; then
        sudo chsh -s /usr/local/bin/bash $(whoami)
    fi
}

function init_virtualenvwrapper() {
    pip install --upgrade pip
    pip install virtualenvwrapper
}

function init_iterm2() {
    cp init/com.googlecode.iterm2.plist ~/Library/Preferences
    chmod 600 ~/Library/Preferences/com.googlecode.iterm2.plist
}

function init_system() {
    # nvram Preferences:
    # - silent boot (unreliable)
    sudo nvram SystemAudioVolume=" "
    
    # screensaver prefs

    # make sure no prefs are hiding in memory
    osascript -e 'tell application "System Preferences" to quit'
    killall cfprefsd

    defaults write com.apple.screensaver askForPassword -int 1
    defaults write com.apple.screensaver askForPasswordDelay 1200
    defaults write com.apple.screensaver idleTime 120


    # Device Preferences

    # fast key repeat
    defaults write NSGlobalDomain KeyRepeat -int 2

    # no keypress delay
    defaults write NSGlobalDomain InitialKeyRepeat -int 15

    # tab moves focus through All controls
    defaults write NSGlobalDomain AppleKeyboardUIMode -int 2

    # fast tracking
    defaults write NSGlobalDomain com.apple.trackpad.scaling -int 3
    # tap to click
    defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad \
             Clicking -bool true
    defaults -currentHost write NSGlobalDomain \
             com.apple.mouse.tapBehavior -int 1

    #
    # Menu bar stuff
    #
    
    # Clock Display (add date and seconds)
    defaults write com.apple.menuextra.clock DateFormat \
             -string "EEE MMM d  h:mm:ss a"

    # Show battery percentage
    defaults write com.apple.menuextra.battery ShowPercent YES

    # Restart the menu bar
    killall SystemUIServer
    
    # General Preferences: preserve windows when closing an app
    # defaults write NSGlobalDomain NSQuitAlwaysKeepsWindows -boolean true

    # General tab: use dark menu bar and dock
    defaults write NSGlobalDomain AppleInterfaceStyle -string Dark

    # Security & Privacy pane
    # Turn firewall on
    sudo defaults write /Library/Preferences/com.apple.alf globalstate -int 1
}

function init_terminal() {

    # flush the plist cache
    killall cfprefsd

    # delete existing Solarized Dark profile, if it exists
    /usr/libexec/PlistBuddy ~/Library/Preferences/com.apple.Terminal.plist -x -c \
                            "delete ':Window Settings:Solarized Dark'" 2>/dev/null

    # add back the key
    /usr/libexec/PlistBuddy ~/Library/Preferences/com.apple.Terminal.plist -x -c \
                            "add ':Window Settings:Solarized Dark' dict"

    # import previously saved Terminal preferences
    /usr/libexec/PlistBuddy ~/Library/Preferences/com.apple.Terminal.plist -x -c \
                            "merge '/Users/careyjung/init/Solarized Dark.terminal' ':Window Settings:Solarized Dark'"

    # make them the default
    /usr/libexec/PlistBuddy ~/Library/Preferences/com.apple.Terminal.plist -x -c \
                            "set ':Default Window Settings' 'Solarized Dark'"
    /usr/libexec/PlistBuddy ~/Library/Preferences/com.apple.Terminal.plist -x -c \
                            "set ':Startup Window Settings' 'Solarized Dark'"

}

function init_finder() {

    killall cfprefsd

    # Finder Preferences:
    # - hide files from Desktop
    defaults write com.apple.finder CreateDesktop false

    # Full POSIX path in Title bar
    defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

    # Keep folders on top when sorting by name
    # defaults write com.apple.finder _FXSortFoldersFirst -bool true

    # Use list view in all Finder windows by default
    # Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv`
    defaults write com.apple.finder FXPreferredViewStyle -string "clmv"

    # Disable the warning before emptying the Trash
    defaults write com.apple.finder WarnOnEmptyTrash -bool false

    killall Finder
}

function init_dock() {

    # Dock Preferences
    # Hot corners:
    #  0: no-op
    #  2: Mission Control
    #  3: Show application windows
    #  4: Desktop
    #  5: Start screen saver
    #  6: Disable screen saver
    #  7: Dashboard
    # 10: Put display to sleep
    # 11: Launchpad
    # 12: Notification Center
    # 'tr' = top right, 'br' = bottom right, etc.
    defaults write com.apple.dock wvous-tr-corner -int 2
    defaults write com.apple.dock wvous-tr-modifier -int 0
    defaults write com.apple.dock wvous-br-corner -int 10
    defaults write com.apple.dock wvous-br-modifier -int 0
    defaults write com.apple.dock wvous-bl-corner -int 4
    defaults write com.apple.dock wvous-bl-modifier -int 0			

    defaults write com.apple.dock minimize-to-application -bool true

    # Orientation: left, bottom, or right
    defaults write com.apple.dock orientation -string left

    # auto-hide on
    defaults write com.apple.dock autohide -bool true

    # auto-hide animation off
    defaults write com.apple.dock autohide-delay -float 0
    defaults write com.apple.dock autohide-time-modifier -float 0

    # remove all apps from the dock. I'll add those I need
    # as I go. And in Mojave, the new 'recently used' section
    # in the dock does about everything I need.
    # Note to self: dockutil does a 'killall Dock' to restart it
    dockutil --remove all
}

function init_appstore() {

    # NB: the softwareupdate command below is the only one that seems
    # to have any effect on system settings

    # These supposedly need to run as root
    sudo softwareupdate --schedule off

    # Enable the WebKit Developer Tools in the Mac App Store
    sudo defaults write com.apple.appstore WebKitDeveloperExtras -bool true

    # Enable Debug Menu in the Mac App Store
    sudo defaults write com.apple.appstore ShowDebugMenu -bool true

    # Enable the automatic update check
    sudo defaults write com.apple.SoftwareUpdate \
         AutomaticCheckEnabled -boolean true
    # Check for software updates daily, not just once per week
    sudo defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

    # Download newly available updates in background
    sudo defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1

    # Install System data files & security updates
    sudo defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1

    # Turn on app auto-update
    sudo defaults write com.apple.commerce AutoUpdate -bool true

    # Turn on OS auto-updates
    sudo defaults write com.apple.commerce \
         AutoUpdateRestartRequired -bool true

    sudo softwareupdate --schedule on
}

function init_dotfiles() {

    if [ ! -d .git ]; then
        git init
        git remote add origin git@github.com:careyjung/dotfiles.git
        git fetch
        git checkout origin/master --force --track
    fi

    source ~/.bash_profile
}

usage() {
    echo "Usage: $(basename $0) [-h] [-n] [APP]..."
    echo "	-h: print this usage message and exit"
    echo "	-n: dryrun. Print, but do not run commands"
    echo "      APP is in ${!APPSPECS[@]}"
}

while getopts "hns" opt; do
    case ${opt} in
        h) usage; exit 0
           ;;
        n) DRYRUN=true
           ;;
        s) STEP=true
           ;;
        \?) usage: exit 1
            ;;
    esac
done
shift $((OPTIND -1))

# if specified on the command line, only do those setups
if [ $# -gt 0 ]; then
    for app in $@; do
        if [[ "${APPSPECS[$app]}" = "" ]]; then
            echo No recipe for $app
            usage
            exit 1
        fi
    done
    unset APPS
    APPS=$@
fi

cd ~
process_app homebrew
for app in ${APPS[@]}; do
    process_app $app
done
