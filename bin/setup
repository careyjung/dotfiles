#!/usr/bin/env bash

CALLS=(
    repo
    sudo
    system
    terminal
    finder
    dock
    appstore
    homebrew
    bash
    brewapps
    caskapps
)

BREWAPPS=(
    git
    python
    python2
)

CASKAPPS=(
    logitech-options
    google-chrome
    marshallofsound-google-play-music-player
    emacs
    sketchup-pro
    whatsapp
)

# undo my special sudoer powers (trap set in setup_sudo)
# trap handler
function unsetup_sudo() {
    sudo -- sh -c \
           "rm -f /etc/sudoers.d/wheel; dscl /Local/Default -delete /Groups/wheel GroupMembership $(whoami)"
    echo Log out then back in for changes to take effect
}


function setup_repo() {
    # go home
    cd ~

    [ -d .ssh ] || tar xvf Documents/Keys/ssh.tar
    [ -d .gnupg ] || tar xvf Documents/Keys/gnupg.tar

    if [ ! -d .git ]; then
        git init
        git remote add origin git@github.com:careyjung/dotfiles.git
        git fetch
        git checkout origin/master --force --track
    fi
}


# make me a sudoer, temporarily
function setup_sudo() {

    trap unsetup_sudo EXIT KILL

    printf "%s\n" "%wheel ALL=(ALL) NOPASSWD: ALL" | \
        sudo tee "/etc/sudoers.d/wheel" > /dev/null && \
        sudo dscl /Local/Default append /Groups/wheel GroupMembership "$(whoami)"
}

function setup_homebrew() {
    
    if [ ! `which brew` ]; then
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi
    brew update
    brew upgrade
}

function setup_bash() {

    brew install bash

    if ! fgrep -q '/usr/local/bin/bash' /etc/shells; then
        echo '/usr/local/bin/bash' | sudo tee -a /etc/shells
    fi
    if [ $SHELL != '/usr/local/bin/bash' ]; then
        sudo chsh -s /usr/local/bin/bash $(whoami)
    fi
        
}

# no longer called, since we checkout directly into home
function setup_dotfiles() {

    echo ${DOTFILES[@]}
    rsync -avh --no-perms ${DOTFILES[@]} ~
    (cd ~; source ~/.bash_profile)
}

function setup_brewapps() {

    for app in ${BREWAPPS[@]}; do
        brew install $app
    done
}


function setup_caskapps() {

    for app in ${CASKAPPS[@]}; do
        brew cask install $app
    done
}

function setup_system() {
    # nvram Preferences:
    # - silent boot (unreliable)
    sudo nvram SystemAudioVolume=" "
    
    # screensaver prefs
    defaults write com.apple.screensaver askForPassword -int 1
    defaults write com.apple.screensaver askForPasswordDelay 1200
    defaults write com.apple.screensaver idleTime 120
    defaults read com.apple.screensaver >/dev/null
    osascript -e 'tell application "System Preferences" to quit'


    # Device Preferences
    defaults write NSGlobalDomain KeyRepeat -int 2				# fast repeat
    defaults write NSGlobalDomain InitialKeyRepeat -int 15			# no delay
    defaults write NSGlobalDomain com.apple.trackpad.scaling -int 3		# fast tracking
    defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true # tap to click
    defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
}

function setup_appstore() {

    # NB: the softwareupdate command below is the only one that seems
    # to have any effect on system settings

    # These supposedly need to run as root
    sudo softwareupdate --schedule off

    # Enable the WebKit Developer Tools in the Mac App Store
    sudo defaults write com.apple.appstore WebKitDeveloperExtras -bool true

    # Enable Debug Menu in the Mac App Store
    sudo defaults write com.apple.appstore ShowDebugMenu -bool true

    # Enable the automatic update check
    sudo defaults write com.apple.SoftwareUpdate AutomaticCheckEnabled -bool true
    # Check for software updates daily, not just once per week
    sudo defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

    # Download newly available updates in background
    sudo defaults write com.apple.SoftwareUpdate AutomaticDownload -int 1

    # Install System data files & security updates
    sudo defaults write com.apple.SoftwareUpdate CriticalUpdateInstall -int 1

    # Automatically download apps purchased on other Macs
    sudo defaults write com.apple.SoftwareUpdate ConfigDataInstall -int 1

    # Turn on app auto-update
    sudo defaults write com.apple.commerce AutoUpdate -bool true

    # Allow the App Store to reboot machine on macOS updates
    sudo defaults write com.apple.commerce AutoUpdateRestartRequired -bool true
    sudo softwareupdate --schedule on

}


function setup_dock() {

    # Dock Preferences
    # Hot corners:
    #  0: no-op
    #  2: Mission Control
    #  3: Show application windows
    #  4: Desktop
    #  5: Start screen saver
    #  6: Disable screen saver
    #  7: Dashboard
    # 10: Put display to sleep
    # 11: Launchpad
    # 12: Notification Center
    # 'tr' = top right, 'br' = bottom right, etc.
    defaults write com.apple.dock wvous-tr-corner -int 2
    defaults write com.apple.dock wvous-tr-modifier -int 0
    defaults write com.apple.dock wvous-br-corner -int 10
    defaults write com.apple.dock wvous-br-modifier -int 0
    defaults write com.apple.dock wvous-bl-corner -int 4
    defaults write com.apple.dock wvous-bl-modifier -int 0			

    defaults write com.apple.dock minimize-to-application -bool true

    # Orientation: left, bottom, or right
    defaults write com.apple.dock orientation -string left

    # auto-hide on
    defaults write com.apple.dock autohide -bool true

    # auto-hide animation off
    defaults write com.apple.dock autohide-delay -float 0
    defaults write com.apple.dock autohide-time-modifier -float 0

    killall Dock
}

function setup_finder() {

    # Finder Preferences:
    # - hide files from Desktop
    defaults write com.apple.finder CreateDesktop false

    # Full POSIX path in Title bar
    defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

    # Keep folders on top when sorting by name
    # defaults write com.apple.finder _FXSortFoldersFirst -bool true

    # Use list view in all Finder windows by default
    # Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv`
    defaults write com.apple.finder FXPreferredViewStyle -string "clmv"

    # Disable the warning before emptying the Trash
    defaults write com.apple.finder WarnOnEmptyTrash -bool false

    killall Finder
}

function setup_terminal() {

    cp init/com.apple.Terminal.plist ~/Library/Preferences

    # Force Terminal to flush its cache (supposedly)
    defaults read com.apple.Terminal>/dev/null 
}


while getopts ":hi" opt; do
  case ${opt} in
    i ) interactive=1
      ;;
    h ) lst=$( IFS='|'; echo "Usage: $0 [-i] [${CALLS[*]}]"); echo $lst; exit 0
      ;;
    \? ) lst=$( IFS='|'; echo "Usage: $0 [-i] [${CALLS[*]}]"); echo $lst; exit 1
      ;;
  esac
done
shift $((OPTIND -1))

if [ $# -gt 0 ]; then
    unset CALLS
    CALLS=$@
fi

for call in ${CALLS[@]}; do
    echo Setting up ${call}
    setup_${call}
    if [ $interactive ]; then
        read -p "Done setting up ${call}.
Press any key to continue... "
    else
        echo Done setting up ${call}.
    fi
done

exit 0
